version: '2'

services:

  # User Interface
  # nginx server with user interface
  interface:
    image: cloudiator/user-interface:latest
    volumes:
    - ./interface/appConfig.template:/usr/share/nginx/html/appConfig.template
    ports:
    - "8080:80"
    environment:
    - API_URL=http://${HOST_IP}:9000
    - AUTH_MODE=${AUTH_MODE}
    - AUTH_TOKEN=${AUTH_TOKEN}
    command: sh -c "envsubst \"`env | awk -F = '{printf \" $$%s\", $$1}'`\" < /usr/share/nginx/html/appConfig.template > /usr/share/nginx/html/assets/appConfig.json && exec nginx -g 'daemon off;'"

  # Storage for the virtual machines
  # Uses mariadb
  vm-store:
    image: mariadb:latest
    restart: always
    environment:
    - MYSQL_RANDOM_ROOT_PASSWORD=yes
    - MYSQL_DATABASE=vm
    - MYSQL_USER=${DATABASE_USER}
    - MYSQL_PASSWORD=${DATABASE_PASSWORD}

  # Agent responsible for starting virtual machines
  vm-agent:
    depends_on:
    - "vm-store"
    - "kafka"
    - "discovery-agent"
    - "user-agent"
    image: ${IMAGE_PREFIX}cloudiator/vm-agent:latest
    restart: always
    environment:
    - JPA_USER=${DATABASE_USER}
    - JPA_PASSWORD=${DATABASE_PASSWORD}
    - JPA_URL=jdbc:mysql://vm-store:3306/vm
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    - LOGSTASH_HOST=logstash:5000
    - STATISTICS_ENABLED=true
    - STATISTICS_INFLUX_URL=http://influx:8086
    - STATISTICS_INFLUX_USER=cloudiator
    - STATISTICS_INFLUX_PASSWORD=${INFLUX_PASSWORD}
    - VM_ENABLE_CLEANUP=false

  # Storage for nodes
  # Uses mariadb
  node-store:
    image: mariadb:latest
    restart: always
    environment:
    - MYSQL_RANDOM_ROOT_PASSWORD=yes
    - MYSQL_DATABASE=node
    - MYSQL_USER=${DATABASE_USER}
    - MYSQL_PASSWORD=${DATABASE_PASSWORD}

  # Agent responsible for starting nodes
  node-agent:
    depends_on:
    - "node-store"
    - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/node-agent:latest
    restart: always
    environment:
    - JPA_USER=${DATABASE_USER}
    - JPA_PASSWORD=${DATABASE_PASSWORD}
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    - JPA_URL=jdbc:mysql://node-store:3306/node
    - LOGSTASH_HOST=logstash:5000

  # Storage for discovery
  # Uses mariadb
  discovery-store:
    image: mariadb:latest
    restart: always
    environment:
    - MYSQL_RANDOM_ROOT_PASSWORD=yes
    - MYSQL_DATABASE=discovery
    - MYSQL_USER=${DATABASE_USER}
    - MYSQL_PASSWORD=${DATABASE_PASSWORD}

  # Agent responsible for the discovery
  # of cloud offers
  discovery-agent:
    depends_on:
    - "discovery-store"
    - "user-agent"
    - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/discovery-agent:latest
    restart: always
    environment:
    - JPA_USER=${DATABASE_USER}
    - JPA_PASSWORD=${DATABASE_PASSWORD}
    - JPA_URL=jdbc:mysql://discovery-store:3306/discovery
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  # Agent responsible for installing
  # environments on allocated nodes
  install-agent:
    depends_on:
    - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/install-agent:latest
    restart: always
    environment:
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    - LOGSTASH_HOST=logstash:5000
    - INSTALLER_JAVA_DOWNLOAD=${INSTALLER_JAVA_DOWNLOAD}
    - INSTALLER_VISOR_DOWNLOAD=${INSTALLER_VISOR_DOWNLOAD}
    - INSTALLER_LANCE_DOWNLOAD=${INSTALLER_LANCE_DOWNLOAD}
    - INSTALLER_DOCKER_BINARY_DOWNLOAD=${INSTALLER_DOCKER_BINARY_DOWNLOAD}
    - INSTALLER_DOCKER_MTU_DOWNLOAD=${INSTALLER_DOCKER_MTU_DOWNLOAD}
    - INSTALLER_ALLUXIO_DOWNLOAD=${INSTALLER_ALLUXIO_DOWNLOAD}
    - INSTALLER_DLMSAGENT_DOWNLOAD=${INSTALLER_DLMSAGENT_DOWNLOAD}
    - INSTALLER_SPARK_MASTER_IP=${HOST_IP}
    - INSTALLER_SPARK_MASTER_PORT=7077
    - INSTALLER_EMS_URL=http://${HOST_IP}:8111/baguette/registerNode
    - INSTALLER_EMS_API_KEY=
    - SPARK_JMS_IP=${JMS_IP}
    - SPARK_JMS_PORT=${JMS_PORT}
    - SPARK_APP_NAME=${APP_NAME}
    - SPARK_METRIC_PATTERN=${METRIC_PATTERN}
    - SPARK_METRIC_REPORTING_INTERVAL=${METRIC_REPORTING_INTERVAL}

  # Agent containing the matchmaking logic
  # Responsible for generating node candidates
  # Responsible for selecting best node candidate
  matchmaking-agent:
    depends_on:
    - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/matchmaking-agent:latest
    restart: always
    environment:
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    - LOGSTASH_HOST=logstash:5000
    - MATCHMAKING_SOLVING_TIME=2

  # Storage for jobs
  # Uses mariadb
  job-store:
    image: mariadb:latest
    restart: always
    environment:
    - MYSQL_RANDOM_ROOT_PASSWORD=yes
    - MYSQL_DATABASE=job
    - MYSQL_USER=${DATABASE_USER}
    - MYSQL_PASSWORD=${DATABASE_PASSWORD}

  # Agent responsible for jobs
  job-agent:
    depends_on:
    - "job-store"
    - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/job-agent:latest
    restart: always
    environment:
    - JPA_USER=${DATABASE_USER}
    - JPA_PASSWORD=${DATABASE_PASSWORD}
    - JPA_URL=jdbc:mysql://job-store:3306/job
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  # Storage for schedules
  # Uses mariadb
  schedule-store:
    image: mariadb:latest
    restart: always
    environment:
    - MYSQL_RANDOM_ROOT_PASSWORD=yes
    - MYSQL_DATABASE=schedule
    - MYSQL_USER=${DATABASE_USER}
    - MYSQL_PASSWORD=${DATABASE_PASSWORD}

  # Agent responsible for scheduling
  # Receives task to be scheduled and
  # handles the instantiation workflow
  scheduler-agent:
    depends_on:
    - "kafka"
    - "schedule-store"
    image: ${IMAGE_PREFIX}cloudiator/scheduler-agent:latest
    restart: always
    environment:
    - JPA_USER=${DATABASE_USER}
    - JPA_PASSWORD=${DATABASE_PASSWORD}
    - JPA_URL=jdbc:mysql://schedule-store:3306/schedule
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  # Agent handling lance processes
  lance-agent:
    depends_on:
    - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/lance-agent:latest
    restart: always
    environment:
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    - JAVA_TOOL_OPTIONS=-Dlca.client.config.registry=etcdregistry -Dlca.client.config.registry.etcd.hosts=${HOST_IP}

  # Storage for functions
  # Uses mariadb
  faas-store:
    image: mariadb:latest
    restart: always
    environment:
    - MYSQL_RANDOM_ROOT_PASSWORD=yes
    - MYSQL_DATABASE=faas
    - MYSQL_USER=${DATABASE_USER}
    - MYSQL_PASSWORD=${DATABASE_PASSWORD}

  # Agent handling faas processes
  faas-agent:
    depends_on:
    - "kafka"
    - "faas-store"
    image: ${IMAGE_PREFIX}cloudiator/faas-agent:latest
    restart: always
    environment:
    - JPA_USER=${DATABASE_USER}
    - JPA_PASSWORD=${DATABASE_PASSWORD}
    - JPA_URL=jdbc:mysql://faas-store:3306/faas
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  # Agent handling Spark processes
  spark-agent:
    depends_on:
    - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/spark-agent:latest
    restart: always
    environment:
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    - LIVY_SERVER=${HOST_IP}:8998

  # Storage for users of the system
  # Uses mariadb
  user-store:
    image: mariadb:latest
    restart: always
    environment:
    - MYSQL_RANDOM_ROOT_PASSWORD=yes
    - MYSQL_DATABASE=user
    - MYSQL_USER=${DATABASE_USER}
    - MYSQL_PASSWORD=${DATABASE_PASSWORD}

  # Agent responsible for user management
  # authentication and authorisation
  user-agent:
    depends_on:
    - "user-store"
    - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/user-agent:latest
    restart: always
    environment:
    - JPA_USER=${DATABASE_USER}
    - JPA_PASSWORD=${DATABASE_PASSWORD}
    - JPA_URL=jdbc:mysql://user-store:3306/user
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    - AUTH_MODE=${AUTH_MODE}
    - AUTH_TOKEN=${AUTH_TOKEN}

  # Server that exposes the main API
  # Uses REST
  # Partly autogenerated from Swagger
  rest-server:
    depends_on:
    - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/rest-server:latest
    environment:
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    - LOGSTASH_HOST=logstash:5000
    ports:
    - 9000:9000

  # Storage for monitoring management
  # Uses mariadb
  monitoring-store:
    image: mariadb:latest
    restart: always
    environment:
      - MYSQL_RANDOM_ROOT_PASSWORD=yes
      - MYSQL_DATABASE=user
      - MYSQL_USER=${DATABASE_USER}
      - MYSQL_PASSWORD=${DATABASE_PASSWORD}

  monitoring-agent:
    image: ${IMAGE_PREFIX}cloudiator/monitoring-agent
    restart: always
    environment:
      - JPA_USER=${DATABASE_USER}
      - JPA_PASSWORD=${DATABASE_PASSWORD}
      - JPA_URL=jdbc:mysql://monitoring-store:3306/user
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  # Utility service
  # Responsible for encrypting data
  encryption-agent:
    depends_on:
    - "kafka"
    image: ${IMAGE_PREFIX}cloudiator/encryption-agent:latest
    environment:
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
    - /opt/data/password
    - /opt/data/salt

  # Database used by the securestore-agent
  secure-store:
    image: mariadb:latest
    restart: always
    environment:
    - MYSQL_RANDOM_ROOT_PASSWORD=yes
    - MYSQL_DATABASE=secureStore
    - MYSQL_USER=${DATABASE_USER}
    - MYSQL_PASSWORD=${DATABASE_PASSWORD}

  # Responsible for storing secured variables
  securestore-agent:
    depends_on:
    - kafka
    - encryption-agent
    - secure-store
    image: ${IMAGE_PREFIX}cloudiator/securestore-agent:latest
    environment:
    - JPA_USER=${DATABASE_USER}
    - JPA_PASSWORD=${DATABASE_PASSWORD}
    - JPA_URL=jdbc:mysql://secure-store:3306/secureStore
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  # Responsible for parsing a job description given
  # as YAML format (optional)
  yaml-agent:
    depends_on:
    - kafka
    image: ${IMAGE_PREFIX}cloudiator/yaml-agent:latest
    environment:
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092


  # ETCD directory required by lance
  etcd:
    image: quay.io/coreos/etcd
    ports:
    - 4001:4001
    - 2380:2380
    - 2379:2379
    environment:
    - ETCD_NAME=etcd0
    - ETCD_ADVERTISE_CLIENT_URLS=http://${HOST_IP}:2379,http://${HOST_IP}:4001
    - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379,http://0.0.0.0:4001
    - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://${HOST_IP}:2380
    - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
    - ETCD_INITIAL_CLUSTER=etcd0=http://${HOST_IP}:2380

  # (optional)
  # Can be used for debugging the etcd directory.
  etcd-browser:
    build: ./etcd-browser
    ports:
    - 8000:8000
    environment:
    - ETCD_HOST=etcd
    - ETCD_PORT=2379
    depends_on:
    - "etcd"

  # Apache Kafka Broker
  # Main communication hub
  kafka:
    depends_on:
    - "zookeeper"
    image: wurstmeister/kafka
    hostname: kafka
    restart: always
    environment:
    - KAFKA_ADVERTISED_HOST_NAME=kafka
    - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    - KAFKA_MESSAGE_MAX_BYTES=2147483646

  # Apache Zookeeper
  # used by Kafka
  zookeeper:
    image: wurstmeister/zookeeper
    restart: always

  # Influx DB (optional)
  # used to collect statistics
  influx:
    image: influxdb:latest
    ports:
    - "8086:8086"
    environment:
    - INFLUXDB_DB=cloudiator
    - INFLUXDB_ADMIN_USER=admin
    - INFLUXDB_ADMIN_PASSWORD=${INFLUX_PASSWORD}
    - INFLUXDB_USER=cloudiator
    - INFLUXDB_USER_PASSWORD=${INFLUX_PASSWORD}
    volumes:
    - /var/lib/influxdb

  # Chronograf (optional)
  chronograf:
    image: chronograf:latest
    depends_on:
    - "influx"
    volumes:
    - /var/lib/chronograf
    ports:
    - "8888:8888"
    environment:
    - INFLUXDB_URL=http://${HOST_IP}:8086
    - INFLUXDB_USERNAME=cloudiator
    - INFLUXDB_PASSWORD=${INFLUX_PASSWORD}

  # (optional)
  # can be used for debugging kafka broker
  kafka-manager:
    depends_on:
    - "kafka"
    - "zookeeper"
    image: sheepkiller/kafka-manager:latest
    environment:
    - ZK_HOSTS=zookeeper:2181
    - APPLICATION_SECRET=verySecureSecret
    - KM_VERSION=1.3.3.17
    ports:
    - 8082:9000
    volumes:
    - ./kafka-manager:/kafka-manager-1.3.1.8/conf

  # (optional)
  # ELK Stack is used for logging
  elasticsearch:
    build:
      context: elasticsearch/
    volumes:
    - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"

  # (optional)
  # ELK Stack is used for logging
  logstash:
    build:
      context: logstash/
    volumes:
    - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
    - elasticsearch

  # (optional)
  # ELK Stack is used for logging
  kibana:
    build:
      context: kibana/
    volumes:
    - ./kibana/config/:/usr/share/kibana/config:ro
    ports:
    - "5601:5601"
    depends_on:
    - elasticsearch

  # (optional)
  # Monitoring of docker containers
  cadvisor:
    image: google/cadvisor:latest
    restart: always
    ports:
    - "8081:8080"
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro

  # (optional, only required if Spark jobs need to be executed)
  # use DEPLOY_MODE=client for pySpark and DEPLOY_MODE=cluster for Java/Scala applications
  livy-server:
    image: ${IMAGE_PREFIX}cloudiator/livy-server:latest
    restart: always
    environment:
    - SPARK_MASTER_ENDPOINT=${HOST_IP}
    - SPARK_MASTER_PORT=7077
    - DEPLOY_MODE=cluster
    volumes:
    - /tmp:/tmp
    #ports:
    #- 8998:8998
    network_mode: host
  # (optional, only required if Spark jobs need to be executed)
  spark-master:
    image: ${IMAGE_PREFIX}cloudiator/spark-master:latest
    restart: always
    environment:
    - PUBLIC_IP=${HOST_IP}
    - SPARK_MASTER_UI_PORT=8181
    - SPARK_MASTER_PORT=7077
    - JMS_IP=${JMS_IP}
    - JMS_PORT=${JMS_PORT}
    - APP_NAME=${APP_NAME}
    - METRIC_PATTERN=${METRIC_PATTERN}
    - METRIC_REPORTING_INTERVAL=${METRIC_REPORTING_INTERVAL}
    #ports:
    #- 7077:7077
    #- 8181:8080
    network_mode: host

  # (optional)
  # Managing of running docker containers
  portainer:
    image: portainer/portainer
    restart: always
    ports:
    - "8083:9000"
    command: -H unix:///var/run/docker.sock
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - portainer_data:/data

volumes:
  portainer_data:
